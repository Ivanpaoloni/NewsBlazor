@page "/"
@using System.Net.Http;
@using System.Text.Json;
@using NewsBlazor.Models;
@using NewsBlazor.Services;
@using Microsoft.JSInterop;

@inject HttpClient httpClient
@inject NewsService newsService
@inject WeatherService WeatherService
@inject IJSRuntime JSRuntime

<PageTitle>Inicio</PageTitle>

        <!-- Page content-->
        <div class="container">
            <div class="row">
                <!-- Blog entries-->
                <div class="col-lg-8">
                    @if (newsList != null || categories != null)
                    {
                        <div class="row">
                            <div class="row">
                                <div class="">
                                    @foreach (var news in newsList)
                                    {
                                <div class="card mb-4">
                                    <a href="/viewnews/@news.id"><img class="card-img-top" src="@news.imageUrl" alt="..." /></a>
                                            <div class="card-body">
                                        <div class="small text-muted"><a class="text-muted" href="/secciones/@news.category.name">@news.category.name</a>
                                            , @news.author.name, @news.publicationDate.ToShortDateString()</div>
                                                <h2 class="card-title">@news.title</h2>
                                                <p class="card-text">@news.description</p>
                                        <a class="btn btn-danger" href="/viewnews/@news.id">Ver noticia completa →</a>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        if (newsList.Count == 0)
                        {
                            <h3>No hay noticias disponibles.</h3>
                        }
                    }
                    else
                    {
            
                    }
                <!-- Pagination-->
                <nav aria-label="Pagination">
                    <hr class="my-0" />
                    <ul class="pagination justify-content-center my-4">
                        <li class="page-item disabled"><a class="page-link" href="#" tabindex="-1" aria-disabled="true">Newer</a></li>
                    <li class="page-item active" aria-current="page"><a class="page-link" href="#!">1</a></li>
                        <li class="page-item "><a class="page-link" href="#!">2</a></li>
                        <li class="page-item"><a class="page-link" href="#!">3</a></li>
                        <li class="page-item disabled"><a class="page-link" href="#!">...</a></li>
                        <li class="page-item"><a class="page-link" href="#!">15</a></li>
                        <li class="page-item"><a class="page-link" href="#!">Older</a></li>
                    </ul>
                </nav>
            </div>
                <!-- Side widgets-->
                <div class="col-lg-4">
                    <!-- Search widget-->
                    <div class="card mb-4">
                        <div class="card-header">Search</div>
                        <div class="card-body">
                            <div class="input-group">
                        <input class="form-control" type="text" placeholder="Buscar una noticia ..." aria-label="Buscar una noticia ..." aria-describedby="button-search" />
                                <button class="btn btn-danger" id="button-search" type="button">Ir</button>
                            </div>
                        </div>
                    </div>
                    <!-- Categories widget-->
                    <div class="card mb-4">
                        <div class="card-header">Categorias</div>
                    <div class="container">
                        <div class="row">
                            @if (categories != null)
                            {
                                foreach (var cat in categories)
                                {
                                <div class="col">
                                    <a href="/secciones/@cat.name">@cat.name</a>
                                </div>  
                                }
                            }
                        </div>
                    </div>

                    </div>
                    <!-- Weather widget-->
                    <div class="card mb-4">
                        <div class="card-header">Clima</div>
                            <div class="card-body">
                                @if(weatherData != null)
                                {
                        <p>Ciudad: @weatherData.Name</p>
                        <p>Temperatura: @weatherData.Main.Temp °C</p>
                                }

                            </div>
                        </div>
                    </div>
                </div>
            </div>
       

@code {
    private List<News> newsList;
    private List<Category> categories;
    private WeatherData weatherData;

    protected override async Task OnInitializedAsync()
    {

        newsList = await newsService.Get();
        //get Categories for navbar.
        var apiUrlCategory = "https://localhost:7081/api/category";
        var responseCategory = await httpClient.GetAsync(apiUrlCategory);

        if (responseCategory.IsSuccessStatusCode)
        {
            var jsonStringCategories = await responseCategory.Content.ReadAsStringAsync();
            var allCategories = JsonSerializer.Deserialize<List<Category>>(jsonStringCategories);
            categories = allCategories.ToList();
        }
        else
        {
            categories = new List<Category> { };
        }  
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetWeatherData();
            StateHasChanged();
        }
    }

    // funcion para obtener el clima y la localizacion.
    private async Task GetWeatherData()
    {
       
        
        var latitude = -31.756278;
        var longitude = -60.475150;

        // Hacer algo con la latitud y longitud obtenidas
        var apiKey = "cb4b62d3cd1ba79ac4bb8f75805eaa14";
        weatherData = await WeatherService.GetWeatherDataByCoordinatesAsync(latitude, longitude, apiKey);
        
        
    }
    public class GeolocationPosition
    {
        public GeolocationCoordinates Coords { get; set; }
    }
    public class GeolocationCoordinates
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    
}
